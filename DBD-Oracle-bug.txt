
there is a bug in older versions of DBD::Oracle that prevents the normal use of ora_lob_read on bfiles

https://rt.cpan.org/Public/Bug/Display.html?id=75163

So the script tr2.pl does not work with the DBD::Oracle that is installed with Oracle 11g

==================================


  ORA-24801
     All attempts to use a bind variable back to perl fail with ORA-24801


       with ParamValues: :out=undef, :tracefile_name_in='cdb2_ora_24755.trc'] at ./t2.pl line 160.
       DBD::Oracle::st execute failed: ORA-24801: illegal parameter value in OCI lob function (DBD ERROR: OCILobRead) ...


     The 2 lines with a comment of ORA-24801 will exhibit this behavior

     The dest database is 19c, and the client is 12c

     DBD::Oracle 1.80 is the most recent version
     DBI 1.636 is receent.
     Running the code on the server gets the same results.

     The use of outputting to dbms_output is a workaround.

     On any recent version of Oracle (the last 12 years or so, as of 2021), the amount of output from dbms_output is unlimited


     Interestingly, this test program works just fine:

     # reads up to 100M bytes
     # max possible it 2B
     $dbh->{LongReadLen} = 100000000;
     $dbh->{LongTruncOk}=1;

     my $in_clob = "<document>\n";
     $in_clob .= "  <value>$_</value>\n" for 1 .. 100_000;
     $in_clob .= "</document>\n";

     my $out_clob;

     my $sth = $dbh->prepare(<<PLSQL_END);
              -- extract 'value' nodes
              DECLARE
                x XMLTYPE := XMLTYPE(:in);
              BEGIN
                :out := x.extract('/document/value').getClobVal();
              END;

     PLSQL_END

     $sth->bind_param( ':in', $in_clob, { ora_type => ORA_CLOB } );
     $sth->bind_param_inout( ':out', \$out_clob, 0, { ora_type => ORA_CLOB } );
     $sth->execute;
 
     print $out_clob;

  ORA-24801 code
     my $sql=q{declare

            DUMPDIR CONSTANT varchar(128) := 'BDUMP_2';

            trace_bfile bfile;

            l_dest_offset   integer := 1;
            l_src_offset    integer := 1;
            l_bfile_csid    number  := 0;
            l_lang_context  integer := 0;
            l_warning       integer := 0;

            temp_clob clob;

     begin

            trace_bfile := bfilename(DUMPDIR, :tracefile_name_in);
            dbms_lob.fileopen(trace_bfile, dbms_lob.file_readonly);
            dbms_lob.createtemporary(lob_loc => temp_clob, cache => false, dur => dbms_lob.session);

            dbms_lob.loadclobfromfile (
                    dest_lob      => temp_clob,
                    src_bfile     => trace_bfile,
                    amount        => dbms_lob.lobmaxsize,
                    dest_offset   => l_dest_offset,
                    src_offset    => l_src_offset,
                    bfile_csid    => l_bfile_csid ,
                    lang_context  => l_lang_context,
                    warning       => l_warning
            );

            dbms_lob.fileclose(trace_bfile);

            -- ORA-24801
            --:out := temp_clob;
            -- also ORA-24801
            --select temp_clob into :out from dual;

            -- work around for just returning a CLOB directly - see ORA-24801 comments
            --dbms_output.enable(null);
            --dbms_output.put_line(temp_clob);


     end;};

